from manim import *
import numpy as np

# Constants
m1, m2 = 1, 0.5
l1, l2 = 1.3, 0.9
g = 1
time_step = 0.02  # Smaller step for smoother animation


# RK4 Integrator
def rk4_step(func, y, t, h):
    k1 = h * func(t, y)
    k2 = h * func(t + h / 2, y + k1 / 2)
    k3 = h * func(t + h / 2, y + k2 / 2)
    k4 = h * func(t + h, y + k3)
    return y + (k1 + 2 * k2 + 2 * k3 + k4) / 6


# Double Pendulum Dynamics
def double_pendulum_dynamics(t, state):
    theta1, theta2, omega1, omega2 = state
    delta = theta2 - theta1

    denom1 = (m1 + m2) * l1 - m2 * l1 * np.cos(delta) ** 2
    denom2 = (l2 / l1) * denom1

    dtheta1 = omega1
    dtheta2 = omega2

    domega1 = (
        m2 * l2 * omega2**2 * np.sin(delta) * np.cos(delta)
        + m2 * g * np.sin(theta2) * np.cos(delta)
        + m2 * l2 * omega2**2 * np.sin(delta)
        - (m1 + m2) * g * np.sin(theta1)
    ) / denom1

    domega2 = (
        -l1 * omega1**2 * np.sin(delta) * np.cos(delta)
        + (m1 + m2) * g * np.sin(theta1) * np.cos(delta)
        - (m1 + m2) * l1 * omega1**2 * np.sin(delta)
        - (m1 + m2) * g * np.sin(theta2)
    ) / denom2

    return np.array([dtheta1, dtheta2, domega1, domega2])


# Simulate Double Pendulum
def simulate_double_pendulum(initial_state, t_max, dt):
    t = 0
    state = initial_state
    states = [state]
    while t < t_max:
        state = rk4_step(double_pendulum_dynamics, state, t, dt)
        states.append(state)
        t += dt
    return np.array(states)


# Initial Conditions
initial_state = [np.pi / 4, 1, 0, 0]
t_max = 10
states = simulate_double_pendulum(initial_state, t_max, time_step)

# Get positions of pendulum links
theta1, theta2 = states[:, 0], states[:, 1]
x1 = l1 * np.sin(theta1)
y1 = -l1 * np.cos(theta1)
x2 = x1 + l2 * np.sin(theta2)
y2 = y1 - l2 * np.cos(theta2)


# Animation with Manim
class DoublePendulumScene(Scene):
    def construct(self):
        # Pendulum components
        pivot = Dot(point=ORIGIN, color=WHITE)
        link1 = Line(start=ORIGIN, end=[x1[0], y1[0], 0], color=BLUE, stroke_width=4)
        link2 = Line(
            start=[x1[0], y1[0], 0], end=[x2[0], y2[0], 0], color=GREEN, stroke_width=4
        )
        bob1 = Dot(point=[x1[0], y1[0], 0], color=BLUE)
        bob2 = Dot(point=[x2[0], y2[0], 0], color=GREEN)

        # Add components to the scene
        self.add(pivot, link1, link2, bob1, bob2)

        # Animation function
        def update_system(mob, dt, i=[0]):
            i[0] += 1
            if i[0] >= len(x1):  # Stop if out of bounds
                return mob

            # Update positions
            link1.put_start_and_end_on(ORIGIN, [x1[i[0]], y1[i[0]], 0])
            link2.put_start_and_end_on([x1[i[0]], y1[i[0]], 0], [x2[i[0]], y2[i[0]], 0])
            bob1.move_to([x1[i[0]], y1[i[0]], 0])
            bob2.move_to([x2[i[0]], y2[i[0]], 0])

        # Add updater
        for mob in [link1, link2, bob1, bob2]:
            mob.add_updater(update_system)

        # Play animation
        self.wait(t_max * time_step)
